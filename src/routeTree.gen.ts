/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ServicesRouteImport } from './routes/services'
import { Route as ReviewsRouteImport } from './routes/reviews'
import { Route as LivresRouteImport } from './routes/livres'
import { Route as GalerieRouteImport } from './routes/galerie'
import { Route as CitationsRouteImport } from './routes/citations'
import { Route as BoutiqueRouteImport } from './routes/boutique'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ReviewsIndexRouteImport } from './routes/reviews/index'
import { Route as LivresIndexRouteImport } from './routes/livres/index'
import { Route as ReviewsSlugRouteImport } from './routes/reviews/$slug'
import { Route as LivresSlugRouteImport } from './routes/livres/$slug'

const ServicesRoute = ServicesRouteImport.update({
  id: '/services',
  path: '/services',
  getParentRoute: () => rootRouteImport,
} as any)
const ReviewsRoute = ReviewsRouteImport.update({
  id: '/reviews',
  path: '/reviews',
  getParentRoute: () => rootRouteImport,
} as any)
const LivresRoute = LivresRouteImport.update({
  id: '/livres',
  path: '/livres',
  getParentRoute: () => rootRouteImport,
} as any)
const GalerieRoute = GalerieRouteImport.update({
  id: '/galerie',
  path: '/galerie',
  getParentRoute: () => rootRouteImport,
} as any)
const CitationsRoute = CitationsRouteImport.update({
  id: '/citations',
  path: '/citations',
  getParentRoute: () => rootRouteImport,
} as any)
const BoutiqueRoute = BoutiqueRouteImport.update({
  id: '/boutique',
  path: '/boutique',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ReviewsIndexRoute = ReviewsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ReviewsRoute,
} as any)
const LivresIndexRoute = LivresIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LivresRoute,
} as any)
const ReviewsSlugRoute = ReviewsSlugRouteImport.update({
  id: '/$slug',
  path: '/$slug',
  getParentRoute: () => ReviewsRoute,
} as any)
const LivresSlugRoute = LivresSlugRouteImport.update({
  id: '/$slug',
  path: '/$slug',
  getParentRoute: () => LivresRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/boutique': typeof BoutiqueRoute
  '/citations': typeof CitationsRoute
  '/galerie': typeof GalerieRoute
  '/livres': typeof LivresRouteWithChildren
  '/reviews': typeof ReviewsRouteWithChildren
  '/services': typeof ServicesRoute
  '/livres/$slug': typeof LivresSlugRoute
  '/reviews/$slug': typeof ReviewsSlugRoute
  '/livres/': typeof LivresIndexRoute
  '/reviews/': typeof ReviewsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/boutique': typeof BoutiqueRoute
  '/citations': typeof CitationsRoute
  '/galerie': typeof GalerieRoute
  '/services': typeof ServicesRoute
  '/livres/$slug': typeof LivresSlugRoute
  '/reviews/$slug': typeof ReviewsSlugRoute
  '/livres': typeof LivresIndexRoute
  '/reviews': typeof ReviewsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/boutique': typeof BoutiqueRoute
  '/citations': typeof CitationsRoute
  '/galerie': typeof GalerieRoute
  '/livres': typeof LivresRouteWithChildren
  '/reviews': typeof ReviewsRouteWithChildren
  '/services': typeof ServicesRoute
  '/livres/$slug': typeof LivresSlugRoute
  '/reviews/$slug': typeof ReviewsSlugRoute
  '/livres/': typeof LivresIndexRoute
  '/reviews/': typeof ReviewsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/boutique'
    | '/citations'
    | '/galerie'
    | '/livres'
    | '/reviews'
    | '/services'
    | '/livres/$slug'
    | '/reviews/$slug'
    | '/livres/'
    | '/reviews/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/boutique'
    | '/citations'
    | '/galerie'
    | '/services'
    | '/livres/$slug'
    | '/reviews/$slug'
    | '/livres'
    | '/reviews'
  id:
    | '__root__'
    | '/'
    | '/boutique'
    | '/citations'
    | '/galerie'
    | '/livres'
    | '/reviews'
    | '/services'
    | '/livres/$slug'
    | '/reviews/$slug'
    | '/livres/'
    | '/reviews/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BoutiqueRoute: typeof BoutiqueRoute
  CitationsRoute: typeof CitationsRoute
  GalerieRoute: typeof GalerieRoute
  LivresRoute: typeof LivresRouteWithChildren
  ReviewsRoute: typeof ReviewsRouteWithChildren
  ServicesRoute: typeof ServicesRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/services': {
      id: '/services'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof ServicesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/reviews': {
      id: '/reviews'
      path: '/reviews'
      fullPath: '/reviews'
      preLoaderRoute: typeof ReviewsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/livres': {
      id: '/livres'
      path: '/livres'
      fullPath: '/livres'
      preLoaderRoute: typeof LivresRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/galerie': {
      id: '/galerie'
      path: '/galerie'
      fullPath: '/galerie'
      preLoaderRoute: typeof GalerieRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/citations': {
      id: '/citations'
      path: '/citations'
      fullPath: '/citations'
      preLoaderRoute: typeof CitationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/boutique': {
      id: '/boutique'
      path: '/boutique'
      fullPath: '/boutique'
      preLoaderRoute: typeof BoutiqueRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/reviews/': {
      id: '/reviews/'
      path: '/'
      fullPath: '/reviews/'
      preLoaderRoute: typeof ReviewsIndexRouteImport
      parentRoute: typeof ReviewsRoute
    }
    '/livres/': {
      id: '/livres/'
      path: '/'
      fullPath: '/livres/'
      preLoaderRoute: typeof LivresIndexRouteImport
      parentRoute: typeof LivresRoute
    }
    '/reviews/$slug': {
      id: '/reviews/$slug'
      path: '/$slug'
      fullPath: '/reviews/$slug'
      preLoaderRoute: typeof ReviewsSlugRouteImport
      parentRoute: typeof ReviewsRoute
    }
    '/livres/$slug': {
      id: '/livres/$slug'
      path: '/$slug'
      fullPath: '/livres/$slug'
      preLoaderRoute: typeof LivresSlugRouteImport
      parentRoute: typeof LivresRoute
    }
  }
}

interface LivresRouteChildren {
  LivresSlugRoute: typeof LivresSlugRoute
  LivresIndexRoute: typeof LivresIndexRoute
}

const LivresRouteChildren: LivresRouteChildren = {
  LivresSlugRoute: LivresSlugRoute,
  LivresIndexRoute: LivresIndexRoute,
}

const LivresRouteWithChildren =
  LivresRoute._addFileChildren(LivresRouteChildren)

interface ReviewsRouteChildren {
  ReviewsSlugRoute: typeof ReviewsSlugRoute
  ReviewsIndexRoute: typeof ReviewsIndexRoute
}

const ReviewsRouteChildren: ReviewsRouteChildren = {
  ReviewsSlugRoute: ReviewsSlugRoute,
  ReviewsIndexRoute: ReviewsIndexRoute,
}

const ReviewsRouteWithChildren =
  ReviewsRoute._addFileChildren(ReviewsRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BoutiqueRoute: BoutiqueRoute,
  CitationsRoute: CitationsRoute,
  GalerieRoute: GalerieRoute,
  LivresRoute: LivresRouteWithChildren,
  ReviewsRoute: ReviewsRouteWithChildren,
  ServicesRoute: ServicesRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
